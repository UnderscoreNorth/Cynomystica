import { Moment } from "moment";
import * as fs from "fs";
import { PlaylistItem } from "./playlist";
import { createFolder } from "../lib/logger";

export interface Message {
  username: string;
  message: string;
  icon: string;
  time: Moment;
}
export type Messages = Array<Message>;
const subTemplate = `
[Script Info]
; Script generated by Aegisub 3.2.2
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1280
PlayResY: 720


[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Arial,20,&H8000FFF7,&H000000FF,&H7B000000,&HFF000000,0,0,0,0,100,100,0,0,1,4.5,4.5,1,23,23,180,1
[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text`;
const maxLines = 16;
export class Subs {
  subtitles: string;
  subtitleMsgs: string[];
  vid: PlaylistItem;
  lastTime: number;

  constructor() {}
  new(vid: PlaylistItem) {
    this.vid = vid;
    this.subtitles = subTemplate;
    this.subtitleMsgs = [];
    this.lastTime = 0;
  }
  message(msg: Message) {
    let time = msg.time.diff(this.vid.startDate) / 1000;
    if (time == this.lastTime) time += 0.01;
    this.addLines(time);
    this.subtitleMsgs.unshift(msg.username + ": " + msg.message);
    this.subtitleMsgs.splice(maxLines);
    this.lastTime = time;
  }
  finish() {
    if (this.subtitleMsgs.length == 0) return;
    const time = this.vid.duration;
    this.addLines(time);
    if (time > 60) {
      const path = `./logs/subs/${this.vid.startDate.year()}/${
        this.vid.startDate.month() + 1
      }/`;
      const fileName = `${this.vid.name}.ass`;
      createFolder(path);
      fs.writeFileSync(path + fileName, this.subtitles);
    }
  }
  addLines(time: number) {
    this.subtitles += `
    Dialogue: 0,${formatTime(this.lastTime)},${formatTime(
      time
    )},Default,,0,0,0,,`;
    for (let j = this.subtitleMsgs.length - 1; j >= 0; j--) {
      let msg = this.subtitleMsgs[j];
      let last = "";
      do {
        last = msg;
        msg = msg.replace(/<span [^>]*>/gm, "");
        msg = msg.replace(`</span>`, "");
        msg = msg.replace(/&gt;/gm, ">");
        msg = msg.replace(/&lt;/gm, "<");
        msg = msg.replace(/<strong>/gm, ">");
        msg = msg.replace(/<\/strong>/gm, ">");
      } while (last !== msg);
      this.subtitles += `${msg}\\N`;
    }
  }
}
let subs = new Subs();
export default function () {
  return subs;
}

function formatTime(seconds: number) {
  let milliseconds = Math.round((seconds - Math.floor(seconds)) * 100);
  return `${Math.floor(seconds / 3600)}:${Math.floor(seconds / 60)
    .toString()
    .padStart(2, "0")}:${(Math.floor(seconds) % 60)
    .toString()
    .padStart(2, "0")}.${milliseconds}`;
}
